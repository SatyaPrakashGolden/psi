openapi: 3.0.0
info:
  title: API Documentation task for PsiBorg Technologies
  description: API Satya Singh
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful!"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc0MTI1ZmEzZWE2OTRlZjljODM2YzYiLCJ1c2VybmFtZSI6ImpvaG5fZG9lIiwiZW1haWwiOiJqb2huLmRvZUBleGFtcGxlLmNvbSIsImlhdCI6MTczNTY2MDIwNSwiZXhwIjoxNzM1NjYzODA1fQ.O9GULjQO2hEkzpOTGIwGd0OPaU0i6wp9GEUg_8ympUs"




    PushNotificationRequest:
      type: object
      properties:
        deviceToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc2NzEyYjJlZjQxYTdmYTczNzBmNzUiLCJ1c2VybmFtZSI6IlNhdHlhU2luZ2giLCJlbWFpbCI6InNhdHlhcHJha2FzaHNpbmdoa2FzaWFAZ21haWwuY29tIiwiaWF0IjoxNzM2MDc0NzEwLCJleHAiOjE3MzY0MzQ3MTB9.PEkemM_4nZKQWgQO0GYcf-QDpSybj_54MObY2NS9Ecc"
        title:
          type: string
          example: "Hello, User!"
        body:
          type: string
          example: "This is your first push notification."
      
    PushNotificationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Push notification sent successfully"

paths:
  /api/admin/login:
    post:
      tags:
        - Admin
      summary: Admin Login
      description: Logs in an admin user and returns a JWT token for authentication.
      operationId: adminLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "Password123!"
              required:
                - usernameOrEmail
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"




  /api/admin/SignUp:
    post:
      tags:
        - Admin
      summary: Admin Sign-Up
      description: Registers a new admin user.
      operationId: adminSignUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Sign-up successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input or missing fields"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/admin/AddTask:
    post:
      tags:
        - Admin
      summary: Add a new task
      description: Creates a new task for the admin with details like title, description, and due date.
      operationId: addTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields or invalid input"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"


  /api/admin/AllTask:
    get:
      tags:
        - Admin
      summary: Retrieve all tasks
      description: Fetches all tasks for the admin user, with an optional search by title, description, priority, or dueDate using a query parameter `key`.
      operationId: getAllTasks
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: query
          description: Search key to filter tasks by title, description, priority, or dueDate.
          required: false
          schema:
            type: string
            example: "Solve Math Problems"
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "60a1c7988c2d7b2b3c2d1f50"
                        title:
                          type: string
                          example: "Solve Math Problems"
                        description:
                          type: string
                          example: "Complete the problems for Math class."
                        priority:
                          type: string
                          example: "High"
                        dueDate:
                          type: string
                          format: date
                          example: "2025-01-01"
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-01-01T10:00:00Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2025-01-01T10:00:00Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid search term"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong, please try again."
                   
  /api/admin/updateTask:
    put:
      tags:
        - Admin
      summary: Update an existing task
      description: Updates the details of an existing task, identified by the task ID provided as a query parameter.
      operationId: updateTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: query
          description: The ID of the task to be updated
          required: true
          schema:
            type: string
            example: "67742fbc01a29fcb66debf4e"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Team Meeting Preparation"
                description:
                  type: string
                  example: "Create an agenda and gather all necessary materials for the upcoming team meeting."
                dueDate:
                  type: string
                  format: date
                  example: "2025-01-10"
              required:
                - title
                - description
                - dueDate
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task updated successfully!"
                  taskId:
                    type: string
                    example: "67742fbc01a29fcb66debf4e"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid task ID or missing fields"
        '404':
          description: Task Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found with the given ID"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/admin/DeleteTask:
    delete:
      tags:
        - Admin
      summary: Delete a task
      description: Deletes a task based on the provided task ID.
      operationId: deleteTask
      security:
        - bearerAuth: []
      parameters:
        - name: taskId
          in: query
          description: The ID of the task to be deleted
          required: true
          schema:
            type: string
            example: "67742fbc01a29fcb66debf4e"
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task deleted successfully!"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid task ID"
        '404':
          description: Task Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found with the given ID"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/admin/getAllTaskbyAdmin:
    get:
      tags:
        - Admin
      summary: Get all tasks by admin with optional search
      description: Fetches all tasks created by the admin. Optionally, tasks can be filtered by a search key.
      operationId: getAllTasksByAdmin
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: query
          description: Optional search keyword to filter tasks by title or description
          required: false
          schema:
            type: string
            example: "Solve Math"
      responses:
        '200':
          description: Successfully fetched tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tasks fetched successfully!"
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "67742fbc01a29fcb66debf4e"
                        title:
                          type: string
                          example: "Solve Math Problems"
                        description:
                          type: string
                          example: "Complete the set of calculus problems assigned in the workbook and verify the solutions."
                        dueDate:
                          type: string
                          format: date
                          example: "2025-02-05"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid search key"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/admin/CreateUser:
    post:
      tags:
        - Admin
      summary: Create a new user
      description: Creates a new user with the provided details such as username, email, password, profile picture, and bio.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "ajay_kumar"
                email:
                  type: string
                  format: email
                  example: "ajay.kumar@company.com"
                password:
                  type: string
                  example: "Ajay2023@Safe"
                profilePicture:
                  type: string
                  format: uri
                  example: "https://example.com/images/ajay.jpg"
                bio:
                  type: string
                  example: "A highly motivated professional with a focus on technology and innovation."
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: Successfully created the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully!"
                  userId:
                    type: string
                    example: "5f4e8b9c6f7d2f23d05f0a94"
        '400':
          description: Bad Request (e.g., missing required fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email format"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"




  /api/admin/CreateManager:
    post:
      tags:
        - Admin
      summary: Create a new manager
      description: Creates a new manager with the provided details such as username, email, password, profile picture, and bio.
      operationId: createManager
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "arvind_verma"
                email:
                  type: string
                  format: email
                  example: "arvind.verma@company.com"
                password:
                  type: string
                  example: "ArvindSecure2023$"
                profilePicture:
                  type: string
                  format: uri
                  example: "https://example.com/images/arvind.jpg"
                bio:
                  type: string
                  example: "Experienced manager focused on team growth, operational excellence, and business results."
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: Successfully created the manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Manager created successfully!"
                  managerId:
                    type: string
                    example: "6e5f8c9b7a0d2e53c8f4b6b9"
        '400':
          description: Bad Request (e.g., missing required fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email format"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/admin/AddTaskForManager:
    get:
      tags:
        - Admin
      summary: Add a task for a specific manager
      description: Adds a task to the specified manager by providing the task ID and manager ID.
      operationId: addTaskForManager
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: taskId
          required: true
          schema:
            type: string
            example: "67742df005eb1b8765c02514"
        - in: query
          name: ManagerId
          required: true
          schema:
            type: string
            example: "67742fbc01a29fcb66debf4e"
      responses:
        '200':
          description: Successfully added the task to the manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task added to manager successfully!"
        '400':
          description: Bad Request (e.g., missing taskId or ManagerId)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "taskId or ManagerId is missing"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"


               
  /api/admin/AddUsersInManagerTeam:
    post:
      tags:
        - Admin
      summary: Add users to a manager's team
      description: Adds a list of users to a specific manager's team based on the provided ManagerId and list of user IDs.
      operationId: addUsersInManagerTeam
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: ManagerId
          required: true
          schema:
            type: string
            example: "6774125fa3ea694ef9c836c6"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Users:
                  type: array
                  items:
                    type: string
                    example: "67742df005eb1b8765c02514"
              required:
                - Users
      responses:
        '200':
          description: Successfully added users to the manager's team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Users added to the manager's team successfully."
                  manager:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "6774125fa3ea694ef9c836c6"
                      team:
                        type: array
                        items:
                          type: string
                          example: "67742df005eb1b8765c02514"
        '400':
          description: Bad Request (e.g., ManagerId or Users are missing)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ManagerId or Users are missing or invalid."
        '404':
          description: Manager or some users not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Manager not found or some users not found."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."


     
 




  /api/admin/pushNotification:
    post:
      tags:
        - Admin
      summary: Send a push notification
      description: Sends a push notification to a user's device using a provided device token.
      operationId: sendPushNotification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushNotificationRequest'
            example:
              deviceToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzc2NzEyYjJlZjQxYTdmYTczNzBmNzUiLCJ1c2VybmFtZSI6IlNhdHlhU2luZ2giLCJlbWFpbCI6InNhdHlhcHJha2FzaHNpbmdoa2FzaWFAZ21haWwuY29tIiwiaWF0IjoxNzM2MDc0NzEwLCJleHAiOjE3MzY0MzQ3MTB9.PEkemM_4nZKQWgQO0GYcf-QDpSybj_54MObY2NS9Ecc"
              title: "Hello, User!"
              body: "This is your first push notification."
      responses:
        '200':
          description: Push notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationResponse'
        '400':
          description: Bad Request (Invalid or missing input)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid device token or notification content."
        '401':
          description: Unauthorized (Invalid or missing Bearer token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized. Please provide a valid Bearer token."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong, please try again later."

    

  /api/admin/logOut:
    get:
      tags:
        - Admin
      summary: Admin Logout
      description: Logs out the admin user by removing the access token from the database.
      operationId: adminLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized. Access token is missing or invalid."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."

   





  /api/manager/login:
    post:
      tags:
        - Manager
      summary: Manager login
      description: Allows the manager to log in using their email/username and password.
      operationId: managerLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                  example: "alice.smith@company.com"
                password:
                  type: string
                  example: "AliceSecure2023$"
              required:
                - usernameOrEmail
                - password
      responses:
        '200':
          description: Login successful, returns the authentication token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful!"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1NTJzZjd2c3VhIiwidXNlcm5hbWUiOiJhY2xlX3NtaXRoQGNvbXBhbnkuY29tIiwiaWF0IjoxNjc4NzE2MjYwLCJleHBpcmVkIjoxNjc4NzI2MDAwfQ.Od9Zdeu1nsmfjf3KsWiBrzQ==" 
        '400':
          description: Bad Request (e.g., incorrect email/username or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/manager/ManagerAllUsers:
    get:
      tags:
        - Manager
      summary: Get all users managed by a manager
      description: Fetches all the users that belong to the manager's team.
      operationId: getManagerAllUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched the manager's team members
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Manager's team members fetched successfully."
                  teamMembers:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "5f1e45f7c9e77b3c0e45d7a2"
                        username:
                          type: string
                          example: "john_doe"
                        email:
                          type: string
                          example: "john.doe@company.com"
                        profilePicture:
                          type: string
                          example: "https://example.com/images/john.jpg"
                        bio:
                          type: string
                          example: "A dedicated team member working on various projects."
        '404':
          description: Manager not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Manager not found."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."



  /api/manager/TotalTaskAccessManager:
    get:
      tags:
        - Manager
      summary: Fetch All Tasks Assigned to a Manager
      description: Retrieves a list of all tasks assigned to the manager.
      operationId: getTotalManagerTasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Manager's tasks fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Manager's tasks fetched successfully."
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "6774bc8cdd212d6885f1a6fc"
                        title:
                          type: string
                          example: "Solve Math Problems"
                        description:
                          type: string
                          example: "Complete the set of calculus problems assigned in the workbook and verify the solutions."
                        dueDate:
                          type: string
                          format: date-time
                          example: "2025-02-05T00:00:00.000Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request parameters"
        '404':
          description: Manager Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Manager not found."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or missing token"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/manager/TaskAssignToUser:
    get:
      tags:
        - Manager
      summary: Assign a Task to a User
      description: Assign a specific task to a user based on their UserId and TaskId.
      operationId: assignTaskToUser
      security:
        - bearerAuth: []
      parameters:
        - name: UserId
          in: query
          description: Unique identifier of the user to whom the task is assigned.
          required: true
          schema:
            type: string
            example: "6774dbdefcd52f681b39a6e9"
        - name: TaskId
          in: query
          description: Unique identifier of the task to be assigned.
          required: true
          schema:
            type: string
            example: "6774bc8cdd212d6885f1a6fc"
      responses:
        '200':
          description: Task successfully assigned to the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task successfully assigned to the user."
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "6774bc8cdd212d6885f1a6fc"
                      title:
                        type: string
                        example: "Solve Math Problems"
                      description:
                        type: string
                        example: "Complete the set of calculus problems assigned in the workbook and verify the solutions."
                      dueDate:
                        type: string
                        format: date-time
                        example: "2025-02-05T00:00:00.000Z"
                      assignedTo:
                        type: array
                        items:
                          type: string
                          example: "6774dbdefcd52f681b39a6e9"
                      createdBy:
                        type: string
                        example: "6774125fa3ea694ef9c836c6"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2025-01-01T03:54:52.261Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2025-01-02T08:51:17.774Z"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input parameters"
        '404':
          description: Task or User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task or User not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred"



  /api/manager/TeamsUserProfile:
    get:
      tags:
        - Manager
      summary: Get the profiles of the manager's team members
      description: Fetches the profiles of all the team members associated with the authenticated manager.
      operationId: getTeamMembers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Team members fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Team members fetched successfully."
                  teamMembers:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "6774dbdefcd52f681b39a6e9"
                        username:
                          type: string
                          example: "priya_kumar"
                        email:
                          type: string
                          example: "priya.kumar@indianmail.com"
                        profilePicture:
                          type: string
                          example: "https://example.com/images/priya.jpg"
                        bio:
                          type: string
                          example: "Dynamic manager with extensive experience in project management and process optimization, passionate about empowering teams to achieve success."
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-01-01T06:08:30.307Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2025-01-01T06:08:30.307Z"
        '404':
          description: Manager not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Manager not found."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."




  /api/manager/updatedTaskByManager:
    put:
      tags:
        - Manager
      summary: Update Task Details by Manager And Update Users on Real Time
      description: Allows a manager to update the details (title, description, and due date) of a task they are authorized to manage.
      operationId: updateTaskByManager
      security:
        - bearerAuth: []
      parameters:
        - name: TaskId
          in: query
          description: The unique identifier of the task to be updated.
          required: true
          schema:
            type: string
            example: "6774bc8cdd212d6885f1a6fc"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Solve Advanced Math Problems"
                description:
                  type: string
                  example: "Complete the remaining calculus problems and verify the solutions with additional resources."
                dueDate:
                  type: string
                  format: date-time
                  example: "2025-02-10T00:00:00.000Z"
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task updated successfully."
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "6774bc8cdd212d6885f1a6fc"
                      title:
                        type: string
                        example: "Solve Advanced Math Problems"
                      description:
                        type: string
                        example: "Complete the remaining calculus problems and verify the solutions with additional resources."
                      dueDate:
                        type: string
                        format: date-time
                        example: "2025-02-10T00:00:00.000Z"
                  teamMembers:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "6774dbdefcd52f681b39a6e9"
                        username:
                          type: string
                          example: "priya_kumar"
                        email:
                          type: string
                          example: "priya.kumar@indianmail.com"
        '400':
          description: Bad Request, task update failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid data or incomplete fields."
        '404':
          description: Task or Manager not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found."
        '403':
          description: Unauthorized to access or update task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Manager does not have access to this task."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."




  /api/manager/logOut:
    get:
      tags:
        - Manager
      summary: Manager Logout
      description: Logs out the manager by removing the access token from the database.
      operationId: managerLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized. Access token is missing or invalid."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."




  /api/user/MyProfile:
    get:
      tags:
        - User
      summary: Retrieve User Profile
      description: Fetches the profile details of the currently authenticated user.
      operationId: getUserProfile
      security:
        - bearerAuth: []  # Token verification required here
      responses:
        '200':
          description: Successfully retrieved profile information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile retrieved successfully."
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "alia.miller"
                      email:
                        type: string
                        example: "alia.miller@company.com"
                      profilePicture:
                        type: string
                        example: "http://example.com/profile-picture.jpg"
                      bio:
                        type: string
                        example: "Software Developer at XYZ"
                      assignedTasks:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "12345"
                            title:
                              type: string
                              example: "Solve Math Problems"
                            dueDate:
                              type: string
                              format: date-time
                              example: "2025-02-05T00:00:00.000Z"
        '401':
          description: Unauthorized, invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Invalid or missing token."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."




  /api/user/AssignedTask:
    get:
      tags:
        - User
      summary: Retrieve Assigned Tasks
      description: Fetches all tasks that are assigned to the currently authenticated user.
      operationId: getAssignedTasks
      security:
        - bearerAuth: []  # Use the BearerAuth security definition here
      responses:
        '200':
          description: Successfully retrieved tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tasks retrieved successfully."
                  tasks:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "6774bc8cdd212d6885f1a6fc"
                        title:
                          type: string
                          example: "Solve Math Problems"
                        description:
                          type: string
                          example: "Complete the set of calculus problems assigned in the workbook and verify the solutions."
                        dueDate:
                          type: string
                          format: date-time
                          example: "2025-02-05T00:00:00.000Z"
                        assignedTo:
                          type: array
                          items:
                            type: string
                            example: "6774dbdefcd52f681b39a6e9"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."




  /api/user/SubmitTask:
    post:
      tags:
        - User
      summary: Submit Task
      description: Allows a user to submit an assigned task.
      operationId: submitTask
      security:
        - bearerAuth: []  # Requires token verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TaskId:
                  type: string
                  description: The ID of the task to be submitted.
                  example: "64c37ecf5e9f5b001fadb55e"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFsaWEgTWlsbGVyIiwiaWF0IjoxNTE2MjM5MDIyfQ.SbGs0ZGvjD9nE77eVtTqUq1A9VfOcmVu
          required: true
          description: Bearer token for authentication.
      responses:
        '200':
          description: Task successfully submitted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task successfully submitted."
                  task:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "64c37ecf5e9f5b001fadb55e"
                      title:
                        type: string
                        example: "Complete documentation"
                      submmitedUser:
                        type: array
                        items:
                          type: string
                        example: ["12345", "67890"]
        '400':
          description: Bad Request, invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid Task ID."
        '401':
          description: Unauthorized, token missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Invalid or missing token."
        '404':
          description: Resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Task not found."
        '403':
          description: Forbidden, user not authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You are not assigned to this task."
        '409':
          description: Conflict, task already submitted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You have already submitted this task."
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."













  /api/user/logOut:
    get:
      tags:
        - User
      summary: User Logout
      description: Logs out the user by removing the access token from the database.
      operationId: userLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized. Access token is missing or invalid."
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."
